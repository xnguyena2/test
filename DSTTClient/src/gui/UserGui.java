package gui;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Arrays;

import javax.imageio.ImageIO;
import javax.imageio.spi.ImageReaderWriterSpi;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfRect;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;

import fuzzycommitment.Main;
import javafaces.FaceRecognition;
import mainfunction.Authentication;
import mainfunction.Enrollment;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nguyen Phong
 */
public class UserGui extends javax.swing.JFrame {

	VideoCapture webSource = null;
	Mat frame = new Mat();
	Mat faceCropImg;
	MatOfByte mem = new MatOfByte();
	private DaemonThread myThread = null;
	private ClientThread clientThread = null;
	CascadeClassifier faceDetector;// = CascadeClassifier('haarcascade_frontalface_default.xml');
	boolean isReset = false;
    /**
     * Creates new form UserGui
     */
    public UserGui() {
        initComponents();
        myInit();
    }
    
    public void myInit(){
    	 faceDetector = new CascadeClassifier("E:\\Android\\opencv_2.41\\opencv\\build\\share\\OpenCV\\haarcascades\\haarcascade_frontalface_default.xml");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        gBioQuatiza = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        gFuzzyEncode = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        gInputBio = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        gKM = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        gKey = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        gBioNonInvert = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        gCameraShow = new javax.swing.JPanel();
        gSelectFileBtn = new javax.swing.JButton();
        gCapture = new javax.swing.JButton();
        gRegister = new javax.swing.JButton();
        gLogin = new javax.swing.JButton();
        gStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        gBioQuatiza.setText("bio quati");

        jLabel11.setText("Fuzzy-encode");

        gFuzzyEncode.setText("fuzzy encode");

        jLabel1.setText("Biometric:");
        jLabel1.setName(""); // NOI18N

        gInputBio.setText("bio");
        gInputBio.setName(""); // NOI18N

        jLabel3.setText("KM");

        gKM.setText("km");

        jLabel5.setText("KEY");

        gKey.setText("key");

        jLabel7.setText("Bio Non-Invert");

        gBioNonInvert.setText("non-invertible transformation");

        jLabel9.setText("Bio Quatization");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gBioQuatiza)
                            .addComponent(gKey)
                            .addComponent(gInputBio)
                            .addComponent(gKM)
                            .addComponent(gBioNonInvert)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(gFuzzyEncode)))
                .addContainerGap(511, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(gInputBio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(gKM))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(gKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(gBioNonInvert))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(gBioQuatiza))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(gFuzzyEncode))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        gInputBio.getAccessibleContext().setAccessibleName("gBioText");

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout gCameraShowLayout = new javax.swing.GroupLayout(gCameraShow);
        gCameraShow.setLayout(gCameraShowLayout);
        gCameraShowLayout.setHorizontalGroup(
            gCameraShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        gCameraShowLayout.setVerticalGroup(
            gCameraShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );

        gSelectFileBtn.setText("Select File");
        gSelectFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gSelectFileBtnActionPerformed(evt);
            }
        });

        gCapture.setText("Capture");
        gCapture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gCaptureActionPerformed(evt);
            }
        });

        gRegister.setText("Register");
        gRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gRegisterActionPerformed(evt);
            }
        });

        gLogin.setText("Login");
        gLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gLoginActionPerformed(evt);
            }
        });

        gStatus.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(gCameraShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(gSelectFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gCapture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gRegister, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(gStatus))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gCameraShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(gSelectFileBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gCapture)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gRegister)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gLogin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gStatus)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

    private void formWindowClosed(java.awt.event.WindowEvent evt) {                                  
        // TODO add your handling code here:
        myThread.runnable = false;
    }                                 

    String fileNameSelect = null;
    private void gSelectFileBtnActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
          File file = fileChooser.getSelectedFile();
          fileNameSelect = file.getPath();
          System.out.println(fileNameSelect);
          faceCropImg = org.opencv.highgui.Highgui.imread(fileNameSelect);
          myThread.showCapture = true;
          gCapture.setText("Reset");
          isReset = true;
          // load from file
        }
    }                                              

    private void gCaptureActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	if(isReset){
    		myThread.showCapture = false;
    		gCapture.setText("Capture");
    		isReset = false;
    	}else{
    		myThread.captureImg = true;
    	}
    }                                        

    private void gRegisterActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    	gStatus.setText("Status");
    	register();
    }                                         

    private void gLoginActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    	gStatus.setText("Status");
    	login();
    }                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

	System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UserGui usg = new UserGui();
                usg.setVisible(true);
                usg.startCapture();
                usg.connectToServer();
            }
        });
    }
	
	public void startCapture() {
		webSource =new VideoCapture(0);
		myThread = new DaemonThread();
		Thread t = new Thread(myThread);
		t.setDaemon(true);
		myThread.runnable = true;
		t.start();
	}
	
	void register(){
		if(fileNameSelect != null){
			FaceRecognition face1 = new FaceRecognition();
			double[][] listBio = face1.generateBiometric(fileNameSelect, null);
			clientThread.enroll(listBio[0]);
			fileNameSelect = null;
		}else
			JOptionPane.showMessageDialog(this, "Select image or capture face from camera.");
	}
	
	void login(){
		if(fileNameSelect != null){
			FaceRecognition face1 = new FaceRecognition();
			double[][] listBio = face1.generateBiometric(fileNameSelect,null);//("test\\faces94\\faces94\\face\\9326871\\9326871.13.jpg", null);
			clientThread.authen(listBio[0]);
			fileNameSelect = null;
		}else {
			JOptionPane.showMessageDialog(this, "Select image or capture face from camera.");
		}
	}
	
	void connectToServer() {

        // Make connection and initialize streams
        Socket socket;
		try {
			socket = new Socket("169.254.126.210", 1512);
			clientThread = new ClientThread(socket);
			Thread t = new Thread(clientThread);
			t.setDaemon(true);
			clientThread.runnable = true;
			t.start();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
	
	class ClientThread implements Runnable{

		Socket socket;
	    protected volatile boolean runnable = false;
	    public boolean enrollment = false;
	    public boolean authentication = false;
	    
	    double[] bio;
	    
	    void enroll(double[] bio){
	    	this.bio =  bio;
	    	enrollment = true;
	    }
	    
	    void authen(double[] bio){
	    	this.bio = bio;
	    	authentication = true;
	    }
        
        public void regist(BufferedReader in, PrintWriter out, double[] bio){
            try {
	            Enrollment enrll = new Enrollment();
	            String bioTranfor = enrll.generBioTranfor(bio);
	            System.out.println(bioTranfor);
	            
	            gInputBio.setText(Arrays.toString(bio));
	            gKM.setText(Arrays.toString(enrll.getM()));
	            gBioNonInvert.setText(bioTranfor);
	            
	        	out.println("enrollment");	            
	        	out.println(bioTranfor);
	        	//out.println(S);
				String input = in.readLine();
				System.out.print("response:"+input);//Arrays.toString(convertToDoubleAr(input)));
				enrll.saveM();
				gStatus.setText("enroll success");
            } catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        
        public void login(BufferedReader in, PrintWriter out, double[] bio){
            try {
            	Authentication authen = new Authentication();
            	int[] quatizaBio  = new int[bio.length], key = new int[bio.length], realKey = new int[bio.length];
            	
	            double[] bioNonInvert = authen.generBioTranfor(bio);
	            int[] fuzzyEncoded = authen.fuzzyEncode(bioNonInvert, quatizaBio, key, realKey);
	            System.out.println(toString(bioNonInvert));
	            

	            gInputBio.setText(Arrays.toString(bio));
	            gKM.setText(Arrays.toString(authen.getM()));
	            gBioQuatiza.setText(Arrays.toString(quatizaBio));
	            gBioNonInvert.setText(Arrays.toString(bioNonInvert));
	            gKey.setText(Arrays.toString(realKey));
	            gFuzzyEncode.setText(Arrays.toString(fuzzyEncoded));
	            
	        	out.println("authentication");	            
	        	out.println(toString(fuzzyEncoded));
	        	//out.println(S);
				String input = in.readLine();
				String sKey = toString(key);
				System.out.println("Keyresponse:"+input);//Arrays.toString(convertToDoubleAr(input)));
				System.out.println("OriginalKey:"+Arrays.toString(key));//Arrays.toString(convertToDoubleAr(input)));
				System.out.println(input.equals(Arrays.toString(key)));
				if(input.equals(Arrays.toString(key)))
					gStatus.setText("Sccess");
				else
					gStatus.setText("Fail");
            } catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    	
    	String toString(int[] intAr){
    		String result="";
    		for(int i = 0;i< intAr.length;i++){
    			result+=intAr[i];
    			if(i!=intAr.length - 1){
    				result+=" ";
    			}
    		}
    		return result;
    	}
    	
    	String toString(double[] doubleAr){
    		String result="";
    		for(int i = 0;i< doubleAr.length;i++){
    			result+=doubleAr[i];
    			if(i!=doubleAr.length - 1){
    				result+=" ";
    			}
    		}
    		return result;
    	}
	    
	    public ClientThread(Socket socket){
	    	this.socket = socket;
	    }
	    
		@Override
		public void run() {
			// TODO Auto-generated method stub

	        synchronized(this)
	        {
	        	try {
	        		BufferedReader in = new BufferedReader(
	        				new InputStreamReader(socket.getInputStream()));
	        		PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

		            while(runnable)
		            {
		            	if(enrollment){
		            		regist(in, out, bio);
		            		enrollment = false;
		            	}else if(authentication){
		    	            login(in, out, bio);
		    	            authentication = false;
		            	}
		            }
	        	} catch (IOException e) {
	        		// TODO Auto-generated catch block
	        		e.printStackTrace();
	        	}
	        }
		}
		
	}
	
	class DaemonThread implements Runnable
	{
	    protected volatile boolean runnable = false;
	    
	    public boolean captureImg = false;
	    public boolean showCapture = false;

	    @Override
	    public  void run()
	    {
	        synchronized(this)
	        {
	            while(runnable)
	            {
	                if(webSource.grab())
	                {
						try
						{
							if(!showCapture){
								webSource.retrieve(frame);
								Core.flip(frame, frame, 1);
							}
							if(captureImg){
                                
                                // Detect faces in the image.
                                // MatOfRect is a special container class for Rect.
                                MatOfRect faceDetections = new MatOfRect();
                                faceDetector.detectMultiScale(frame, faceDetections);

                                System.out.println(String.format("Detected %s faces",
                                        faceDetections.toArray().length));
                                int x = -1,y = -1, width = -1, height = -1;
                                // Draw a bounding box around each face.
                                for (Rect rect : faceDetections.toArray()) {
                                    if(rect.width>width && rect.height>height){
                                    	x = rect.x;
                                    	y = rect.y;
                                    	width = rect.width;
                                    	height = rect.height;
                                    }
                                }
                                if(width > 0 && height > 0){
                                	Rect rectCrop = new Rect(x, y, width, (int)(height*1.1));
                                	faceCropImg = new Mat(frame,rectCrop);
                                	
                                	Mat resizeimage = new Mat();
                                	Size sz = new Size(180,200);
                                	Imgproc.resize( faceCropImg, resizeimage, sz );
                                	
                                	faceCropImg = resizeimage;
                                	
									File file = new File("tmp/face.jpg");
									Highgui.imwrite(file.getPath(), faceCropImg);
									gCapture.setText("Reset");
									isReset = true;
									showCapture = true;
									fileNameSelect = "tmp/face.jpg";
                                }
								captureImg = false;
							}
                                                        
							if(!showCapture)
								Highgui.imencode(".bmp", frame, mem);
							else Highgui.imencode(".bmp", faceCropImg, mem);
                                                        
							Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));

							BufferedImage buff = (BufferedImage) im;
							Graphics g=gCameraShow.getGraphics();

							if (g.drawImage(buff, 0, 0, gCameraShow.getWidth(), gCameraShow.getHeight(), 0, 0, buff.getWidth(), buff.getHeight(), null))
							
							if(runnable == false)
										{
								System.out.println("Going to wait()");
								this.wait();
							}
						}
						catch(Exception ex)
						{
						}
	                }
	            }
	        }
		}
	}

    // Variables declaration - do not modify                     
    private javax.swing.JLabel gBioNonInvert;
    private javax.swing.JLabel gBioQuatiza;
    private javax.swing.JPanel gCameraShow;
    private javax.swing.JButton gCapture;
    private javax.swing.JLabel gFuzzyEncode;
    private javax.swing.JLabel gInputBio;
    private javax.swing.JLabel gKM;
    private javax.swing.JLabel gKey;
    private javax.swing.JButton gLogin;
    private javax.swing.JButton gRegister;
    private javax.swing.JButton gSelectFileBtn;
    private javax.swing.JLabel gStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   
}
